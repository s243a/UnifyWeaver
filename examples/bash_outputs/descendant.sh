#!/bin/bash
# Generated by UnifyWeaver test suite
# License: MIT OR Apache-2.0
# 
# This is an example output. When you use UnifyWeaver on your own code,
# your output is yours to license as you choose.
#
# descendant - finds descendants (children, grandchildren, etc.)

# Iterative BFS implementation
descendant() {
    local start="$1"
    local target="$2"
    
    if [[ -z "$target" ]]; then
        # Mode: descendant(+,-)  Find all descendants
        descendant_all "$start"
    else
        # Mode: descendant(+,+)  Check if descendant
        descendant_check "$start" "$target"
    fi
}

# Find all descendants of start
descendant_all() {
    local start="$1"
    declare -A visited
    declare -A output_seen
    
    # Use work queue for BFS
    local queue_file="/tmp/descendant_queue_$"
    local next_queue="/tmp/descendant_next_$"
    
    trap "rm -f $queue_file $next_queue" EXIT
    
    echo "$start" > "$queue_file"
    visited["$start"]=1
    
    while [[ -s "$queue_file" ]]; do
        > "$next_queue"
        
        while IFS= read -r current; do
            # Find all children of current (forward direction)
            parent_stream | grep "^$current:" | while IFS=":" read -r from to; do
                if [[ "$from" == "$current" && -z "${visited[$to]}" ]]; then
                    visited["$to"]=1
                    echo "$to" >> "$next_queue"
                    
                    # Output the descendant relationship
                    local output_key="$start:$to"
                    if [[ -z "${output_seen[$output_key]}" ]]; then
                        output_seen["$output_key"]=1
                        echo "$output_key"
                    fi
                fi
            done
        done < "$queue_file"
        
        mv "$next_queue" "$queue_file"
    done
    
    rm -f "$queue_file" "$next_queue"
}

# Check if target is descendant of start
descendant_check() {
    local start="$1"
    local target="$2"
    descendant_all "$start" | grep -q "^$start:$target$" && echo "$start:$target"
}

# Stream function
descendant_stream() {
    descendant_all "$1"
}