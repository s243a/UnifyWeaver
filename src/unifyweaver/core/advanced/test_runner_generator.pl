:- encoding(utf8).
% SPDX-License-Identifier: MIT OR Apache-2.0
% Copyright (c) 2025 John William Creighton (@s243a)
%
% test_runner_generator.pl - Generate test_runner.sh for advanced recursion outputs
% Provides configuration-based test runner generation

:- module(test_runner_generator, [
    generate_test_runner/0,
    generate_test_runner/1
]).

%% generate_test_runner/0
%  Generate test_runner.sh in default location (output/advanced/)
generate_test_runner :-
    generate_test_runner('output/advanced/test_runner.sh').

%% generate_test_runner(+OutputPath)
%  Generate test_runner.sh at specified path
%  Uses configuration-based approach: checks which predefined scripts exist
%  and includes their test cases
generate_test_runner(OutputPath) :-
    open(OutputPath, write, Stream),
    write_header(Stream),

    % Check and write tests for each configured script (if it exists)
    (exists_file('output/advanced/list_length.sh') ->
        write_list_length_tests(Stream) ; true),
    (exists_file('output/advanced/factorial.sh') ->
        write_factorial_tests(Stream) ; true),
    (exists_file('output/advanced/count_items.sh') ->
        write_count_items_tests(Stream) ; true),
    (exists_file('output/advanced/sum_list.sh') ->
        write_sum_list_tests(Stream) ; true),
    (exists_file('output/advanced/even_odd.sh') ->
        write_even_odd_tests(Stream) ; true),

    write_footer(Stream),
    close(Stream),
    format('Generated test runner: ~w~n', [OutputPath]).

%% write_header(+Stream)
write_header(Stream) :-
    write(Stream, '#!/bin/bash\n'),
    write(Stream, '# Test runner for generated advanced recursion scripts\n'),
    write(Stream, '# AUTO-GENERATED - DO NOT EDIT MANUALLY\n'),
    write(Stream, '#\n'),
    write(Stream, '# Generated by: test_runner_generator.pl\n'),
    write(Stream, '# To regenerate: swipl -g "use_module(unifyweaver(core/advanced/test_runner_generator)), generate_test_runner, halt."\n'),
    write(Stream, '\n'),
    write(Stream, 'echo "=== Testing Generated Bash Scripts ==="\n'),
    write(Stream, 'echo ""\n'),
    write(Stream, '\n').

%% write_footer(+Stream)
write_footer(Stream) :-
    write(Stream, '\n'),
    write(Stream, 'echo "=== All Tests Complete ==="\n').

%% write_list_length_tests(+Stream)
write_list_length_tests(Stream) :-
    write(Stream, '# Test list_length.sh\n'),
    write(Stream, 'if [[ -f list_length.sh ]]; then\n'),
    write(Stream, '    echo "--- Testing list_length.sh ---"\n'),
    write(Stream, '    source list_length.sh\n'),
    write(Stream, '\n'),
    write(Stream, '    echo "Test 1: Empty list"\n'),
    write(Stream, '    list_length "[]" ""\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, '    echo "Test 2: Single element list"\n'),
    write(Stream, '    list_length "[a]" ""\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, '    echo "Test 3: Three element list"\n'),
    write(Stream, '    list_length "[a,b,c]" ""\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, 'fi\n'),
    write(Stream, '\n').

%% write_factorial_tests(+Stream)
write_factorial_tests(Stream) :-
    write(Stream, '# Test factorial.sh\n'),
    write(Stream, 'if [[ -f factorial.sh ]]; then\n'),
    write(Stream, '    echo "--- Testing factorial.sh ---"\n'),
    write(Stream, '    source factorial.sh\n'),
    write(Stream, '\n'),
    write(Stream, '    echo "Test 1: factorial(0)"\n'),
    write(Stream, '    factorial "0" ""\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, '    echo "Test 2: factorial(1)"\n'),
    write(Stream, '    factorial "1" ""\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, '    echo "Test 3: factorial(5)"\n'),
    write(Stream, '    factorial "5" ""\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, 'fi\n'),
    write(Stream, '\n').

%% write_count_items_tests(+Stream)
write_count_items_tests(Stream) :-
    write(Stream, '# Test count_items.sh\n'),
    write(Stream, 'if [[ -f count_items.sh ]]; then\n'),
    write(Stream, '    echo "--- Testing count_items.sh ---"\n'),
    write(Stream, '    source count_items.sh\n'),
    write(Stream, '\n'),
    write(Stream, '    echo "Test 1: Empty list with accumulator 0"\n'),
    write(Stream, '    count_items "[]" "0" ""\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, '    echo "Test 2: List [a,b,c] with accumulator 0"\n'),
    write(Stream, '    count_items "[a,b,c]" "0" ""\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, 'fi\n'),
    write(Stream, '\n').

%% write_sum_list_tests(+Stream)
write_sum_list_tests(Stream) :-
    write(Stream, '# Test sum_list.sh\n'),
    write(Stream, 'if [[ -f sum_list.sh ]]; then\n'),
    write(Stream, '    echo "--- Testing sum_list.sh ---"\n'),
    write(Stream, '    source sum_list.sh\n'),
    write(Stream, '\n'),
    write(Stream, '    echo "Test 1: Empty list with accumulator 0"\n'),
    write(Stream, '    sum_list "[]" "0" ""\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, '    echo "Test 2: List [1,2,3] with accumulator 0"\n'),
    write(Stream, '    sum_list "[1,2,3]" "0" ""\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, '    echo "Test 3: List [5,10,15] with accumulator 0"\n'),
    write(Stream, '    sum_list "[5,10,15]" "0" ""\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, 'fi\n'),
    write(Stream, '\n').

%% write_even_odd_tests(+Stream)
write_even_odd_tests(Stream) :-
    write(Stream, '# Test even_odd.sh (mutual recursion)\n'),
    write(Stream, 'if [[ -f even_odd.sh ]]; then\n'),
    write(Stream, '    echo "--- Testing even_odd.sh ---"\n'),
    write(Stream, '    source even_odd.sh\n'),
    write(Stream, '\n'),
    write(Stream, '    echo "Test 1: is_even(0)"\n'),
    write(Stream, '    is_even "0"\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, '    echo "Test 2: is_even(4)"\n'),
    write(Stream, '    is_even "4"\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, '    echo "Test 3: is_odd(3)"\n'),
    write(Stream, '    is_odd "3"\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, '    echo "Test 4: is_odd(6)"\n'),
    write(Stream, '    is_odd "6"\n'),
    write(Stream, '\n'),
    write(Stream, '    echo ""\n'),
    write(Stream, 'fi\n'),
    write(Stream, '\n').

% TODO: Implement inference-based test runner generation
% Future enhancement: Automatically infer test cases by:
% 1. Scanning output/advanced/ directory for all .sh files
% 2. Parsing each script to extract function signatures and arity
% 3. Inferring appropriate test cases based on predicate patterns:
%    - List predicates (has []/[] pattern) → test with [], [a], [a,b,c]
%    - Numeric predicates (has 0/N pattern) → test with 0, 1, 5
%    - Accumulator predicates (arity 3) → test with initial accumulator values
% 4. Generating test_runner.sh dynamically without hardcoded configurations
%
% This would allow the test runner to automatically adapt to new generated scripts
% without manual configuration updates.
%
% Implementation approach:
%   - Add test_runner_generator:generate_test_runner_inferred/0
%   - Use library(filesex) for directory scanning
%   - Parse bash functions using regex or simple pattern matching
%   - Build test case templates based on predicate characteristics
%   - Generate comprehensive test_runner.sh
%
% See design discussion in git history for full specification.
