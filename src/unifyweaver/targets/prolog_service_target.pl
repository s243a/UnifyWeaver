:- module(prolog_service_target, [
    generate_bash_with_prolog_service/3,  % +UserPredicates, +Options, -BashCode
    analyze_dependencies/2,               % +UserPredicates, -Dependencies (reuse from prolog_target)
    write_bash_script/2                   % +BashCode, +OutputPath
]).

%! generate_bash_with_prolog_service(+UserPredicates, +Options, -BashCode) is det.
%
%  Generate a bash script that uses Prolog-as-Service pattern.
%
%  @arg UserPredicates List of predicate indicators (Name/Arity)
%  @arg Options Compilation options:
%               - entry_point(Goal): Main goal to execute
%               - service_name(Name): Name for the Prolog service function
%               - source_file(File): Source file path (for comments)
%  @arg BashCode Generated bash script code
%
%  Example:
%  ```
%  ?- generate_bash_with_prolog_service(
%         [partition_stdin/2, write_partitions/1],
%         [entry_point(partition_stdin(3, P)), service_name(partition_service)],
%         Code
%     ).
%  ```
generate_bash_with_prolog_service(UserPredicates, Options, BashCode) :-
    % Analyze dependencies
    prolog_target:analyze_dependencies(UserPredicates, Dependencies),

    % Generate bash script components
    generate_bash_shebang(ShebangCode),
    generate_bash_header(UserPredicates, Options, HeaderCode),
    generate_bash_env_setup(EnvSetupCode),
    generate_prolog_service_function(UserPredicates, Dependencies, Options, ServiceCode),
    generate_bash_main(Options, MainCode),

    % Combine all parts
    atomic_list_concat([
        ShebangCode,
        HeaderCode,
        EnvSetupCode,
        ServiceCode,
        MainCode
    ], '\n\n', BashCode).

%% generate_bash_shebang(-Code)
%  Generate bash shebang line
generate_bash_shebang('#!/bin/bash').

%% generate_bash_header(+UserPredicates, +Options, -Code)
%  Generate bash script header with metadata
generate_bash_header(UserPredicates, Options, Code) :-
    % Get current date/time
    get_time(Timestamp),
    format_time(atom(DateStr), '%Y-%m-%d %H:%M:%S', Timestamp),

    % Extract source file if provided
    (   member(source_file(SourceFile), Options)
    ->  format(atom(SourceComment), '# Source: ~w', [SourceFile])
    ;   SourceComment = ''
    ),

    % Format predicate list
    length(UserPredicates, NumPreds),
    format(atom(PredsStr), '~w', [UserPredicates]),

    % Build header lines
    format(atom(DateLine), '# Generated: ~w', [DateStr]),
    format(atom(NumPredsLine), '# Predicates transpiled: ~w', [NumPreds]),
    format(atom(PredsLine), '# ~w', [PredsStr]),

    % Combine
    (   SourceComment = ''
    ->  Lines = ['# Generated by UnifyWeaver v0.0.3',
                 '# Target: Bash with Prolog-as-Service',
                 DateLine,
                 NumPredsLine,
                 PredsLine]
    ;   Lines = ['# Generated by UnifyWeaver v0.0.3',
                 '# Target: Bash with Prolog-as-Service',
                 DateLine,
                 SourceComment,
                 NumPredsLine,
                 PredsLine]
    ),
    atomic_list_concat(Lines, '\n', Code).

%% generate_bash_env_setup(-Code)
%  Generate bash environment setup (UNIFYWEAVER_HOME detection)
generate_bash_env_setup(Code) :-
    Lines = [
        '# Set up UnifyWeaver runtime environment',
        'setup_unifyweaver_env() {',
        '    if [ -n "$UNIFYWEAVER_HOME" ]; then',
        '        # Use provided UNIFYWEAVER_HOME',
        '        export UNIFYWEAVER_HOME',
        '    else',
        '        # Try to detect from script location',
        '        local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"',
        '        if [ -d "$script_dir/../src/unifyweaver" ]; then',
        '            export UNIFYWEAVER_HOME="$script_dir/../src/unifyweaver"',
        '        elif [ -d "$script_dir/src/unifyweaver" ]; then',
        '            export UNIFYWEAVER_HOME="$script_dir/src/unifyweaver"',
        '        else',
        '            # Assume installed as SWI-Prolog pack',
        '            export UNIFYWEAVER_HOME=""',
        '        fi',
        '    fi',
        '}',
        '',
        '# Initialize environment',
        'setup_unifyweaver_env'
    ],
    atomic_list_concat(Lines, '\n', Code).

%% generate_prolog_service_function(+UserPredicates, +Dependencies, +Options, -Code)
%  Generate bash function containing Prolog service as heredoc
%
%  Note: To preserve stdin, we use swipl -f to load the code instead of piping heredoc
generate_prolog_service_function(UserPredicates, Dependencies, Options, Code) :-
    % Get service name
    (   member(service_name(ServiceName), Options)
    ->  true
    ;   ServiceName = prolog_service
    ),

    % Generate Prolog code for the heredoc
    generate_prolog_service_code(UserPredicates, Dependencies, Options, PrologCode),

    % Build bash function with heredoc
    %  Strategy: Save heredoc to temp file, load with swipl -f, then stdin is preserved
    format(atom(FunctionHeader), '# Prolog service function\n~w() {', [ServiceName]),

    % Build the function that saves heredoc to temp file and loads it
    Lines = [
        FunctionHeader,
        '    local temp_pl=$(mktemp --suffix=.pl)',
        '    cat << \'PROLOG\' > "$temp_pl"',
        PrologCode,
        'PROLOG',
        '    swipl -q -f "$temp_pl" -g "main, halt" -t halt',
        '    rm -f "$temp_pl"',
        '}'
    ],
    atomic_list_concat(Lines, '\n', Code).

%% generate_prolog_service_code(+UserPredicates, +Dependencies, +Options, -Code)
%  Generate Prolog code to embed in heredoc
generate_prolog_service_code(UserPredicates, Dependencies, Options, Code) :-
    % Generate components
    generate_prolog_search_path_setup(SearchPathCode),
    generate_prolog_imports(Dependencies, ImportsCode),
    generate_prolog_user_code(UserPredicates, UserCode),
    generate_prolog_entry_point(Options, EntryCode),

    % Combine with proper indentation (4 spaces for heredoc content)
    indent_code(SearchPathCode, 4, IndentedSearchPath),
    indent_code(ImportsCode, 4, IndentedImports),
    indent_code(UserCode, 4, IndentedUserCode),
    indent_code(EntryCode, 4, IndentedEntryCode),

    atomic_list_concat([
        IndentedSearchPath,
        IndentedImports,
        IndentedUserCode,
        IndentedEntryCode
    ], '\n\n', Code).

%% generate_prolog_search_path_setup(-Code)
%  Generate Prolog code to set up search path from bash environment
generate_prolog_search_path_setup(Code) :-
    Lines = [
        '% Set up search path from UNIFYWEAVER_HOME environment variable',
        ':- ( getenv(\'UNIFYWEAVER_HOME\', Home), Home \\= \'\'',
        '   -> asserta(file_search_path(unifyweaver, Home))',
        '   ;  true  % Assume installed as pack',
        '   ).'
    ],
    atomic_list_concat(Lines, '\n', Code).

%% generate_prolog_imports(+Dependencies, -Code)
%  Generate Prolog import directives
generate_prolog_imports(Dependencies, Code) :-
    findall(Import, (
        member(Dep, Dependencies),
        prolog_target:dependency_to_import(Dep, Import)
    ), Imports),

    (   Imports = []
    ->  Code = '% No dependencies'
    ;   atomic_list_concat(Imports, '\n', Code)
    ).

%% generate_prolog_user_code(+UserPredicates, -Code)
%  Generate user predicates code
generate_prolog_user_code(UserPredicates, Code) :-
    format(atom(Header), '% === User Code (Transpiled) ===', []),

    % Copy each predicate
    findall(PredCode, (
        member(Pred, UserPredicates),
        prolog_target:copy_predicate_clauses(Pred, PredCode)
    ), PredCodes),

    % Combine
    atomic_list_concat([Header | PredCodes], '\n\n', Code).

%% generate_prolog_entry_point(+Options, -Code)
%  Generate Prolog entry point
generate_prolog_entry_point(Options, Code) :-
    % Get entry point goal
    (   member(entry_point(EntryGoal), Options)
    ->  format(atom(MainBody), '    ~w,', [EntryGoal])
    ;   MainBody = '    true,'
    ),

    % Build lines
    atomic_list_concat([
        '% === Entry Point ===',
        'main :-',
        MainBody,
        '    halt(0).',
        '',
        'main :-',
        '    % If main goal fails, exit with error',
        '    format(user_error, \'Error: Execution failed~n\', []),',
        '    halt(1).'
    ], '\n', Code).

%% generate_bash_main(+Options, -Code)
%  Generate bash main entry point
generate_bash_main(Options, Code) :-
    % Get service name
    (   member(service_name(ServiceName), Options)
    ->  format(atom(ServiceCall), '    ~w', [ServiceName])
    ;   ServiceCall = '    prolog_service'
    ),

    atomic_list_concat([
        '# Main entry point',
        'main() {',
        ServiceCall,
        '}',
        '',
        '# Run main if script is executed directly',
        'if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then',
        '    main "$@"',
        'fi'
    ], '\n', Code).

%% indent_code(+Code, +Spaces, -IndentedCode)
%  Indent each line of code by given number of spaces
indent_code(Code, Spaces, IndentedCode) :-
    atom_string(Code, CodeStr),
    split_string(CodeStr, "\n", "", Lines),

    % Create indentation string
    length(SpaceList, Spaces),
    maplist(=(' '), SpaceList),
    atomic_list_concat(SpaceList, Indent),

    % Indent each line
    maplist(indent_line(Indent), Lines, IndentedLines),
    atomic_list_concat(IndentedLines, '\n', IndentedCode).

indent_line(Indent, Line, IndentedLine) :-
    (   Line = ""
    ->  IndentedLine = ""  % Don't indent empty lines
    ;   atomic_list_concat([Indent, Line], IndentedLine)
    ).

%% write_bash_script(+BashCode, +OutputPath)
%  Write bash script to file and make it executable
write_bash_script(BashCode, OutputPath) :-
    open(OutputPath, write, Stream),
    write(Stream, BashCode),
    close(Stream),

    % Make executable
    format(atom(ChmodCmd), 'chmod +x ~w', [OutputPath]),
    shell(ChmodCmd),

    format('[PrologService] Generated executable bash script: ~w~n', [OutputPath]).

%% analyze_dependencies(+UserPredicates, -Dependencies)
%  Reuse dependency analysis from prolog_target
analyze_dependencies(UserPredicates, Dependencies) :-
    prolog_target:analyze_dependencies(UserPredicates, Dependencies).
